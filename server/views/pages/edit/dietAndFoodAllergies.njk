{% extends "./editPage.njk" %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/character-count/macro.njk" import govukCharacterCount %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% macro otherHtml(type, sequence, comment) %}
  {{ govukCharacterCount({
    id: type + "-other",
    name: type + "[" + sequence + "][comment]",
    classes: "diet-and-food-allergies-text-input",
    maxlength: 100,
    rows: 2,
    value: comment,
    label: { text: "Please specify" },
    hint: { text: "This information may be seen by prisoners working in the kitchen." },
    errorMessage: errors | findError(type + "-other")
  }) }}
{% endmacro %}
{% macro eatingDisorderHtml(sequence, comment) %}
  {{ govukCharacterCount({
    id: "medical-eating-disorder",
    name: "medical[" + sequence + "][comment]",
    classes: "diet-and-food-allergies-text-input",
    maxlength: 100,
    rows: 2,
    value: comment,
    label: { text: "Type of eating disorder" },
    errorMessage: errors | findError("medical-eating-disorder")
  }) }}
{% endmacro %}
{% macro nutrientDeficiencyHtml(sequence, comment) %}
  {{ govukCharacterCount({
    id: "medical-nutrient-deficiency",
    name: "medical[" + sequence + "][comment]",
    classes: "diet-and-food-allergies-text-input",
    maxlength: 100,
    rows: 2,
    value: comment,
    label: { text: "Type of deficiency" },
    errorMessage: errors | findError("medical-nutrient-deficiency")
  }) }}
{% endmacro %}
{% block form %}
  <h1 class="govuk-heading-l govuk-!-margin-bottom-4">Diet and food allergies</h1>
  <form method="post" novalidate="novalidate" autocomplete="off">
    <input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
    <div class="govuk-form-group">
      {% call govukFieldset({
        legend: {
          text: 'Does ' + prisonerName.firstLast + ' have any of these medical dietary requirements?',
          classes: "govuk-fieldset__legend--m",
          isPageHeading: false
        }
      }) %}
      {% set medicalDiets = [] %}
      {% for diet in medicalDietOptions %}
        {% if diet.value == "MEDICAL_DIET_OTHER" %}
          {% set medicalDiets = (medicalDiets.push(
            {
              name: diet.name,
              text: diet.text,
              value: diet.value,
              id: diet.id,
              checked: diet.checked,
              conditional: { html: otherHtml("medical", diet.listSequence, diet.comment) },
              errorMessage: errors | findError("medical-other")
            }
          ), medicalDiets) %}
        {% elseif diet.value == "MEDICAL_DIET_EATING_DISORDER" %}
          {% set medicalDiets = (medicalDiets.push(
            {
              name: diet.name,
              text: diet.text,
              value: diet.value,
              id: diet.id,
              checked: diet.checked,
              conditional: { html: eatingDisorderHtml(diet.listSequence, diet.comment) },
              errorMessage: errors | findError("medical-eating-disorder")
            }
          ), medicalDiets) %}
        {% elseif diet.value == "MEDICAL_DIET_NUTRIENT_DEFICIENCY" %}
          {% set medicalDiets = (medicalDiets.push(
            {
              name: diet.name,
              text: diet.text,
              value: diet.value,
              id: diet.id,
              checked: diet.checked,
              conditional: { html: nutrientDeficiencyHtml(diet.listSequence, diet.comment) },
              errorMessage: errors | findError("medical-nutrient-deficiency")
            }
          ), medicalDiets) %}
        {% else %}
          {% set medicalDiets = (medicalDiets.push(diet), medicalDiets) %}
        {% endif %}
      {% endfor %}
      {{ govukCheckboxes({
        hint: { text: 'Select all that apply.' },
        items: medicalDiets
      }) }}
      {% endcall %}
    </div>
    <div class="govuk-form-group">
      {% call govukFieldset({
        legend: {
          text: 'Does ' + prisonerName.firstLast + ' have any food allergies?',
          classes: "govuk-fieldset__legend--m",
          isPageHeading: false
        }
      }) %}
      {% set allergies = [] %}
      {% for allergy in allergyOptions %}
        {% if allergy.value == "FOOD_ALLERGY_OTHER" %}
          {% set allergies = (allergies.push(
            {
              name: allergy.name,
              text: allergy.text,
              value: allergy.value,
              checked: allergy.checked,
              id: allergy.id,
              conditional: { html: otherHtml("allergy", allergy.listSequence, allergy.comment) }
            }
          ), allergies) %}
        {% else %}
          {% set allergies = (allergies.push(allergy), allergies) %}
        {% endif %}
      {% endfor %}
      {{ govukCheckboxes({
        hint: { text: 'Select all that apply.' },
        items: allergies
      }) }}
      {% endcall %}
    </div>
    <div class="govuk-form-group">
      {% call govukFieldset({
        legend: {
          text: 'Does ' + prisonerName.firstLast + ' have any personalised dietary requirements?',
          classes: "govuk-fieldset__legend--m",
          isPageHeading: false
        }
      }) %}
      {% set personalisedDiets = [] %}
      {% for diet in personalisedDietOptions %}
        {% if diet.value == "PERSONALISED_DIET_OTHER" %}
          {% set personalisedDiets = (personalisedDiets.push(
            {
              name: diet.name,
              text: diet.text,
              value: diet.value,
              checked: diet.checked,
              id: diet.id,
              conditional: { html: otherHtml("personalised", diet.listSequence, diet.comment) }
            }
          ), personalisedDiets) %}
        {% else %}
          {% set personalisedDiets = (personalisedDiets.push(diet), personalisedDiets) %}
        {% endif %}
      {% endfor %}
      {{ govukCheckboxes({
        hint: { text: 'Select all that apply.' },
        items: personalisedDiets
      }) }}
      {% endcall %}
    </div>
    {{ govukCharacterCount({
      name: "cateringInstructions",
      id: "catering-instructions",
      value: cateringInstructions,
      maxlength: 1000,
      label: {
        text: "Catering instructions",
        classes: "govuk-label--m"
      },
      hint: {
        text: "Record additional information for kitchen use only."
      },
      errorMessage: errors | findError("catering-instructions")
    }) }}
    <div class="govuk-button-group">
      {{ govukButton({
        text: "Save",
        type: "submit",
        preventDoubleClick: true,
        attributes: { "data-qa": "edit-submit-button" }
      }) }}
      <a
        href="/prisoner/{{ prisonerNumber }}/personal#personal-details"
        class="govuk-link govuk-link--no-visited-state"
        data-qa="edit-cancel-button">Cancel</a>
    </div>
  </form>
</div></div>{% endblock %}
